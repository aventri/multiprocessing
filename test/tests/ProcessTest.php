<?php

use aventri\Multiprocessing\IPC\StreamInitializer;
use aventri\Multiprocessing\Process\Process;
use aventri\Multiprocessing\Task\EventTask;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

class ProcessTest extends TestCase
{
    /**
     * @var MockObject
     */
    private $process;
    /**
     * @var string
     */
    private string $task;

    public function setUp()
    {
        $this->task = "php " . realpath(__DIR__ . "/../") . "/proc_scripts/process_test.php";
        $this->process = $this->getMockBuilder(Process::class)
            ->setConstructorArgs([$this->task])
            ->setMethods(null)
            ->getMock();

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    private function wait($streams = array())
    {
        $write = null;
        $expect = null;
        stream_select($streams, $write, $expect, null);
    }

    public function testFirst()
    {
        $message = "echo";
        $this->process->start();
        $initializer = new StreamInitializer();
        $this->process->tell(serialize($initializer) . PHP_EOL);
        $this->process->tell(serialize($message));
        $pipes = $this->process->getPipes();
        $readPipes = [$pipes[1], $pipes[2]];
        $this->wait($readPipes);
        $response = unserialize($this->process->listen());
        $this->assertSame($message, $response);
        $this->process->tell(serialize(EventTask::DEATH_SIGNAL));
        $this->wait($readPipes);
        $active = $this->process->isActive();
        $this->assertFalse($active);
        $this->process->close();
    }

//    public function testSecond()
//    {
//        $pro = new Process($this->task);
//
//    }
}